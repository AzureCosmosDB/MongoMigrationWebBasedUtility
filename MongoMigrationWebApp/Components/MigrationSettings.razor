@using OnlineMongoMigrationProcessor
@using System.Text.RegularExpressions;

<div class="modal fade show d-block bg-dark bg-opacity-75" id="myModal" aria-modal="true" role="dialog">
    <div class="modal-dialog bg-dark">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Edit Configuration Settings</h4>
                <button type="button" class="btn-close" aria-label="Close" @onclick="@Cancel"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="mongo-url" class="form-label">Mongo Tools Download URL</label>
                    <input type="text" id="mongo-url" class="form-control" @bind="_configurationBackup.MongoToolsDownloadUrl" />
                </div>
                <div class="mb-3">
                    <label for="has-uuid" class="form-label">
                        <input type="checkbox" id="has-uuid" @bind="_configurationBackup.ReadBinary" />
                        Binary format utilized for the _id
                    </label>
                </div>
                <div class="mb-3">
                    <label for="chunk-size" class="form-label">Chunk Size (in MB) for MongoDump</label>
                    <input type="number" id="chunk-size" class="form-control" @bind="_configurationBackup.ChunkSizeInMb" />
                </div>

                <div class="mb-3">
                    <label for="csbatchsize" class="form-label">Mongo Copy Page Size</label>
                    <input type="number" id="csbatchsize" class="form-control" @bind="_configurationBackup.MongoCopyPageSize" />
                </div>

                <div class="mb-3">
                    <label for="csbatchsize" class="form-label">Max Documents per Change Stream Batch</label>
                    <input type="number" id="csbatchsize" class="form-control" @bind="_configurationBackup.ChangeStreamMaxDocsInBatch" />
                </div>

                <div class="mb-3">
                    <label for="csbatchdurationmax" class="form-label">Max Duration (in seconds) Change Stream Batch</label>
                    <input type="number" id="csbatchdurationmax" class="form-control" @bind="_configurationBackup.ChangeStreamBatchDuration" />
                </div>

                <div class="mb-3">
                    <label for="csbatchdurationmin" class="form-label">Min Duration (in seconds) Change Stream Batch</label>
                    <input type="number" id="csbatchdurationmin" class="form-control" @bind="_configurationBackup.ChangeStreamBatchDurationMin" />
                </div>

                <div class="mb-3">
                    <label for="cs-colls-inbatch" class="form-label">Max Collections per Change Stream Batch</label>
                    <input type="number" id="cs-colls-inbatch" class="form-control" @bind="_configurationBackup.ChangeStreamMaxCollsInBatch" />
                </div>
                <div class="mb-3">
                    <label for="pem-text" class="form-label">CA Certificate file for Source Server(.pem)</label>
                    <InputFile OnChange="OnPemFileUpload" />

                    @if (!string.IsNullOrWhiteSpace(_configurationBackup.CACertContentsForSourceServer))
                    {
                        <button class="btn btn-outline-danger btn-sm mt-2" @onclick="ClearPem">
                            Delete Saved Certificate
                        </button>
                    }
                </div>


                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger mt-2">@errorMessage</div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick=@HandleSubmit>Ok</button>
                <button type="button" class="btn btn-secondary" @onclick="@Cancel">Cancel</button>
            </div>
        </div>
    </div>
</div>

@code
{
    [Parameter]
    public OnlineMongoMigrationProcessor.MigrationSettings? Configuration { get; set; }

    [Parameter]
    public EventCallback<OnlineMongoMigrationProcessor.MigrationSettings> OnConfigurationSaved { get; set; }

    private string errorMessage = string.Empty;

    private void ClearPem()
    {
        _configurationBackup.CACertContentsForSourceServer = string.Empty;
    }

    private async Task OnPemFileUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        using var reader = new StreamReader(file.OpenReadStream(maxAllowedSize: 1024 * 1024));
        _configurationBackup.CACertContentsForSourceServer = await reader.ReadToEndAsync();
    }


    OnlineMongoMigrationProcessor.MigrationSettings? _configurationBackup;

    protected override void OnInitialized()
    {
        if (Configuration != null)
        {
            _configurationBackup = (OnlineMongoMigrationProcessor.MigrationSettings)Configuration.Clone();
        }
    }


    private void HandleSubmit()
    {

        if (_configurationBackup.ChangeStreamBatchDurationMin < 10 || _configurationBackup.ChangeStreamBatchDurationMin > 300)
        {           
            errorMessage = "Min Batch Duration should be between 10 and 300 seconds.";
            return;
        }

        if (_configurationBackup.ChangeStreamBatchDuration < 30 || _configurationBackup.ChangeStreamBatchDuration > 3600)
        {
            errorMessage = "Max Batch Duration should be between 30 and 3600 seconds.";
            return;
        }

        if (_configurationBackup.ChangeStreamBatchDurationMin >= _configurationBackup.ChangeStreamBatchDuration)
        {
            errorMessage = "Min Batch Duration should be less than Max Batch Duration.";
            return;
        }

        if (_configurationBackup.ChangeStreamMaxCollsInBatch < 1 || _configurationBackup.ChangeStreamMaxCollsInBatch > 30)
        {
            errorMessage = "Max Collections per Batch should be between 1 and 30.";
            return;
        }
        if (_configurationBackup.MongoCopyPageSize < 50 || _configurationBackup.MongoCopyPageSize > 40000)
        {
            errorMessage = "Page Size should be between 50 and 40000.";
            return;
        }

        if (_configurationBackup.ChangeStreamMaxDocsInBatch < 100 || _configurationBackup.ChangeStreamMaxDocsInBatch > 10000) // Fixed condition to compare correctly
        {
            errorMessage = "Max Documents per Batch should be between 100 and 10000."; // Corrected error message
            return;
        }

        if (_configurationBackup.ChunkSizeInMb < 2 || _configurationBackup.ChunkSizeInMb > 5120)
        {
            errorMessage = "Chunk Size (in MB) should be between 2 and 5120.";
            return;
        }

        if (!Regex.Match(_configurationBackup.MongoToolsDownloadUrl, @"^https://.*\.zip$").Success)
        {
            errorMessage = "URL must start with 'https://' and end with '.zip'.";
            return;
        }


        Configuration = (OnlineMongoMigrationProcessor.MigrationSettings)_configurationBackup.Clone();

        if (OnConfigurationSaved.HasDelegate)
        {
            OnConfigurationSaved.InvokeAsync(Configuration);
        }
    }

    private void Cancel()
    {
        if (OnConfigurationSaved.HasDelegate)
        {
            OnConfigurationSaved.InvokeAsync(null);
        }
    }
}

