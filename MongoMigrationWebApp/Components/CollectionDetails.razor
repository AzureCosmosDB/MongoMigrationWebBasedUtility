@using OnlineMongoMigrationProcessor

<div class="modal fade show d-block bg-dark bg-opacity-75" id="myModal" aria-modal="true" role="dialog">
    <div class="modal-dialog bg-dark modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Collection Details</h4>
                <button type="button" class="btn-close" aria-label="Close" @onclick="@Cancel"></button>
            </div>
            <div class="modal-body">
                @if (MigrationUnit is not null)
                {
                    <style>
                        .cd-table { table-layout: fixed; width: 100%; font-size: .9rem; }
                        .cd-table th, .cd-table td { vertical-align: top; padding: .35rem .5rem; }
                        .cd-col-label { width: 20ch; white-space: nowrap; }
                        /* Show full values without trimming */
                        .group div { line-height: 1.3; white-space: normal; overflow: visible; text-overflow: clip; word-break: break-word; overflow-wrap: anywhere; }
                        .lbl { color: #666; }
                        @@media (max-width: 768px) { .modal-dialog { max-width: 98vw; } }
                        /* Allow scrolling if content is very long */
                        .modal-body { max-height: 78vh; overflow: auto; }
                    </style>

                    <table class="table table-bordered table-striped cd-table">
                        
                        <tbody>
                            <tr>
                                <td class="cd-col-label">General</td>
                                <td class="group">
                                    <div><span class="lbl">Database:</span> @MigrationUnit.DatabaseName</div>
                                    <div><span class="lbl">Collection:</span> @MigrationUnit.CollectionName</div>
                                    <div><span class="lbl">Source Status:</span> @MigrationUnit.SourceStatus</div>
                                    @if (!string.IsNullOrEmpty(MigrationUnit.UserFilter))
                                    {
                                        <div><span class="lbl">Initial Estimate:</span> N/A since filter applied</div>
                                        <div><span class="lbl">User Filter:</span> @MigrationUnit.UserFilter</div>
                                    }
                                    else
                                    {
                                        <div><span class="lbl">Initial Estimate:</span> @FormatLong(MigrationUnit.EstimatedDocCount)</div>
                                        <div><span class="lbl">User Filter:</span> N/A</div>
                                    }
                                    <div><span class="lbl">Before Copying:</span> @FormatLong(MigrationUnit.ActualDocCount)</div>
                                    <div><span class="lbl">While Processing:</span> @FormatLong(MigrationUnit.SourceCountDuringCopy)</div>
                                    <div><span class="lbl">Indexes Created:</span> @MigrationUnit.IndexesMigrated</div>
                                </td>
                            </tr>

                            <tr>
                                <td class="cd-col-label">Offline Copy</td>
                                <td class="group">
                                    <div><span class="lbl">Started On (UTC):</span> @(MigrationUnit.BulkCopyStartedOn?.ToString() ?? "N/A")</div>
                                    <div><span class="lbl">Ended On (UTC):</span> @(MigrationUnit.BulkCopyEndedOn?.ToString() ?? "N/A")</div>
                                    <div><span class="lbl">Duration:</span> @GetDuration(MigrationUnit.BulkCopyStartedOn, MigrationUnit.BulkCopyEndedOn)</div>
                                    @{
                                        var totals = Helper.GetProcessedTotals(MigrationUnit);
                                    }
                                    <div><span class="lbl">Processed Total:</span> @FormatLong(totals.Total)</div>
                                    <div><span class="lbl">Insert:</span> @FormatLong(totals.Inserted)</div>
                                    <div><span class="lbl">Duplicates (skipped):</span> @FormatLong(totals.Skipped)</div>
                                    <div><span class="lbl">Failed:</span> @FormatLong(totals.Failed)</div>
                                </td>
                            </tr>

                            <tr>
                                <td class="cd-col-label">Change Stream</td>
                                <td class="group">
                                    @if (MigrationJob != null && Helper.IsOnline(MigrationJob))
                                    {
                                        <div><span class="lbl">Mode:</span> @Helper.GetChangeStreamMode(MigrationJob)</div>
                                        <div><span class="lbl">Started On (UTC):</span> @(MigrationUnit.ChangeStreamStartedOn?.ToString() ?? "N/A")</div>
                                        <div><span class="lbl">Start Resume Token:</span> @(MigrationUnit.OriginalResumeToken ?? "N/A")</div>
                                        <div><span class="lbl">Current Timestamp:</span> @MigrationUnit.CursorUtcTimestamp</div>
                                        <div><span class="lbl">Current Resume Token:</span> @(MigrationUnit.ResumeToken ?? "N/A")</div>
                                        <div><span class="lbl">First Change Replayed:</span> @MigrationUnit.InitialDocumenReplayed</div>
                                        <div><span class="lbl">First Change Document:</span> @(MigrationUnit.ResumeDocumentId?.ToString() ?? "N/A")</div>
                                        <div><span class="lbl">First Change Operation:</span> @MigrationUnit.ResumeTokenOperation</div>
                                        <div><span class="lbl">Inserted:</span> @FormatLong(MigrationUnit.CSDocsInserted) (from @FormatLong(MigrationUnit.CSDInsertEvents) events)</div>
                                        <div><span class="lbl">Deleted:</span> @FormatLong(MigrationUnit.CSDocsDeleted) (from @FormatLong(MigrationUnit.CSDeleteEvents) events)</div>
                                        <div><span class="lbl">Updated:</span> @FormatLong(MigrationUnit.CSDocsUpdated) (from @FormatLong(MigrationUnit.CSUpdateEvents) events)</div>
                                        <div><span class="lbl">Duplicate Processed:</span> @FormatLong(MigrationUnit.CSDuplicateDocsSkipped) skipped</div>
                                        <div><span class="lbl">Failed (with retries):</span> @FormatLong(MigrationUnit.CSErrors)</div>
                                        @if (Helper.GetChangeStreamMode(MigrationJob) == "Aggressive" && MigrationUnit.AggressiveCacheDeleted)
                                        {
                                            <div><span class="lbl">Aggressive:</span> Completed on @(MigrationUnit.AggressiveCacheDeletedOn?.ToString("yyyy-MM-dd HH:mm:ss") ?? "N/A") UTC</div>
                                        }
                                    }
                                    else
                                    {
                                        <div class="text-muted">Not an online migration.</div>
                                    }
                                </td>
                            </tr>

                            <tr>
                                <td class="cd-col-label">Sync Back</td>
                                <td class="group">
                                    @if (MigrationJob != null && Helper.IsOnline(MigrationJob) && (MigrationJob?.SyncBackEnabled ?? false))
                                    {
                                        <div><span class="lbl">Resume Token:</span> @(MigrationUnit.SyncBackResumeToken ?? "N/A")</div>
                                        <div><span class="lbl">Started On (UTC):</span> @(MigrationUnit.SyncBackChangeStreamStartedOn?.ToString() ?? "N/A")</div>
                                        <div><span class="lbl">Cursor Utc Timestamp:</span> @MigrationUnit.SyncBackCursorUtcTimestamp</div>
                                        <div><span class="lbl">Inserted:</span> @FormatLong(MigrationUnit.SyncBackDocsInserted) (from @FormatLong(MigrationUnit.SyncBackInsertEvents) events)</div>
                                        <div><span class="lbl">Deleted:</span> @FormatLong(MigrationUnit.SyncBackDocsDeleted) (from @FormatLong(MigrationUnit.SyncBackDeleteEvents) events)</div>
                                        <div><span class="lbl">Updated:</span> @FormatLong(MigrationUnit.SyncBackDocsUpdated) (from @FormatLong(MigrationUnit.SyncBackUpdateEvents) events)</div>
                                        <div><span class="lbl">Duplicate Processed:</span> @FormatLong(MigrationUnit.SyncBackDuplicateDocsSkipped) skipped</div>
                                        <div><span class="lbl">Failed (with retries):</span> @FormatLong(MigrationUnit.SyncBackErrors)</div>
                                    }
                                    else
                                    {
                                        <div class="text-muted">Sync Back not enabled.</div>
                                    }
                                </td>
                            </tr>

                            <tr>
                                <td class="cd-col-label">Comparison</td>
                                <td class="group">
                                    @if (MigrationUnit.ComparedOn.HasValue && MigrationUnit.ComparedOn != DateTime.MinValue)
                                    {
                                        <div><span class="lbl">Hash Compared On (UTC):</span> @MigrationUnit.ComparedOn</div>
                                        <div><span class="lbl">Differences:</span> @FormatLong(MigrationUnit.VarianceCount)</div>
                                    }
                                    else
                                    {
                                        <div class="text-muted">No comparison recorded.</div>
                                    }
                                </td>
                            </tr>
                        </tbody>
                    </table>
                }
                else
                {
                    <div class="text-muted">No properties found.</div>
                }

            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="@Cancel">Close</button>
            </div>
        </div>
    </div>
</div>

@code
{
    [Parameter]
    public MigrationUnit? MigrationUnit { get; set; }

    [Parameter]
    public MigrationJob? MigrationJob { get; set; }


    [Parameter]
    public EventCallback OnClose { get; set; }

    

    private static string GetDuration(DateTime? start, DateTime? end)
    {
        if (!start.HasValue || !end.HasValue || start.Value == DateTime.MinValue || end.Value == DateTime.MinValue)
            return "N/A";
        var d = end.Value - start.Value;
        return $"{(int)d.TotalHours}h {d.Minutes}m {d.Seconds}s";
    }

    private static string FormatLong(long value) => string.Format(System.Globalization.CultureInfo.InvariantCulture, "{0:N0}", value);

    private void Cancel()
    {
        if (OnClose.HasDelegate)
        {
            OnClose.InvokeAsync();
        }
    }
}
