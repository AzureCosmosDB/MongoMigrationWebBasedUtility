@using OnlineMongoMigrationProcessor

<div class="modal fade show d-block bg-dark bg-opacity-75" id="myModal" aria-modal="true" role="dialog">
    <div class="modal-dialog bg-dark">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Collection Details</h4>
                <button type="button" class="btn-close" aria-label="Close" @onclick="@Cancel"></button>
            </div>
            <div class="modal-body">
                @if (Properties?.Any() == true)
                {
                    <table class="table table-borderless" style="font-size: 0.85rem; line-height: 1.1;">
                        <thead>
                            <tr>
                                <th style="width: 30%; white-space: nowrap;">Property</th>
                                <th style="width: 70%; word-break: break-word;">Value</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var kvp in Properties)
                            {
                                <tr>
                                    <td style="white-space: nowrap;">@kvp.Key</td>
                                    <td style="word-break: break-word;">@kvp.Value</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <div class="text-muted">No properties found.</div>
                }

            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="@Cancel">Close</button>
            </div>
        </div>
    </div>
</div>

@code
{
    [Parameter]
    public MigrationUnit? MigrationUnit { get; set; }

    [Parameter]
    public MigrationJob? MigrationJob { get; set; }


    [Parameter]
    public EventCallback OnClose { get; set; }

    private Dictionary<string, string> Properties = new();

    protected override void OnInitialized()
    {
    if (MigrationUnit == null)
            return;

        // Add properties to display

        Properties.Add("Source Status", MigrationUnit.SourceStatus.ToString() ?? "N/A");

        Properties.Add("Offline Copy Start Time", MigrationUnit.BulkCopyStartedOn.ToString() ?? "N/A");
        Properties.Add("Offline Copy End Time", MigrationUnit.BulkCopyEndedOn.ToString() ?? "N/A");

        if (MigrationUnit.BulkCopyStartedOn.HasValue && MigrationUnit.BulkCopyEndedOn.HasValue
            && MigrationUnit.BulkCopyStartedOn != DateTime.MinValue && MigrationUnit.BulkCopyEndedOn != DateTime.MinValue)
        {
            var duration = MigrationUnit.BulkCopyEndedOn.Value - MigrationUnit.BulkCopyStartedOn.Value;
            Properties.Add("Offline Copy Duration", $"{(int)duration.TotalMinutes} min {(int)duration.Seconds} sec");
        }
        else
        {
            Properties.Add("Offline Copy Duration", "N/A");
        }

        if (MigrationUnit.UserFilter != null && MigrationUnit.UserFilter.Any())
        {
            Properties.Add("Source Document Count Initial Estimate", "N/A since filter applied");
            Properties.Add("User Filter", MigrationUnit.UserFilter);
        }
        else
        {
            Properties.Add("Source Document Count Initial Estimate", MigrationUnit.EstimatedDocCount.ToString() ?? "N/A");
            Properties.Add("User Filter", "N/A");
        }
        
        Properties.Add("Source Document Count Before Copying", MigrationUnit.ActualDocCount.ToString() ?? "N/A");

        long totalSkipped = MigrationUnit.MigrationChunks?.Sum(MigrationChunk => MigrationChunk.SkippedAsDuplicateCount) ?? 0;
        long totalInserted = (MigrationUnit.MigrationChunks?.Sum(MigrationChunk => MigrationChunk.RestoredSuccessDocCount) ?? 0) - totalSkipped;
        long totalFailed = MigrationUnit.MigrationChunks?.Sum(MigrationChunk => MigrationChunk.RestoredFailedDocCount) ?? 0;

        Properties.Add("Source Document Count While Processing ", MigrationUnit.SourceCountDuringCopy.ToString() ?? "N/A");
        Properties.Add("Processed Total", (totalInserted + totalSkipped + totalFailed).ToString() ?? "N/A");
        Properties.Add("*********** Insert", (totalInserted).ToString() ?? "N/A");
        Properties.Add("*********** Duplicates(skipped)", (totalSkipped).ToString() ?? "N/A");
        Properties.Add("*********** Failed", (totalFailed).ToString() ?? "N/A");
        Properties.Add("*********** Indexes Created", MigrationUnit.IndexesMigrated.ToString() ?? "N/A");


        if (MigrationJob != null && MigrationJob.IsOnline)
        {
            Properties.Add("Change Stream (CS) Started On", MigrationUnit.ChangeStreamStartedOn.ToString() ?? "N/A");
            Properties.Add("CS Start Resume Token", MigrationUnit.OriginalResumeToken ?? "N/A");

            Properties.Add("CS Current TimeStamp", MigrationUnit.CursorUtcTimestamp.ToString() ?? "N/A");
            Properties.Add("CS CurrentResume Token", MigrationUnit.ResumeToken ?? "N/A");

            Properties.Add("CS First Change Replayed", MigrationUnit.InitialDocumenReplayed.ToString());
            Properties.Add("CS First Change Document", MigrationUnit.ResumeDocumentId?.ToString() ?? "N/A");
            Properties.Add("CS First Change Operation", MigrationUnit.ResumeTokenOperation.ToString());
            Properties.Add("CS Inserted",$"{MigrationUnit.CSDocsInserted.ToString()} (from {MigrationUnit.CSDInsertEvents.ToString()} events)");
            Properties.Add("CS Deleted", $"{MigrationUnit.CSDocsDeleted.ToString()} (from {MigrationUnit.CSDeleteEvents.ToString()} events)");
            Properties.Add("CS Updated", $"{MigrationUnit.CSDocsUpdated.ToString()} (from {MigrationUnit.CSUpdatedEvents.ToString()} events)");
            Properties.Add("CS Duplicate Processed",$"{MigrationUnit.CSDuplicateDocsSkipped.ToString()} skipped");
            Properties.Add("CS Failed (with retries)", $"{MigrationUnit.CSErrors.ToString()}");


            if (MigrationJob.SyncBackEnabled)
            {
                Properties.Add("SyncBack Resume Token", MigrationUnit.SyncBackResumeToken ?? "N/A");
                Properties.Add("SyncBack Change Stream Started On", MigrationUnit.SyncBackChangeStreamStartedOn?.ToString() ?? "N/A");
                Properties.Add("SyncBack Cursor Utc Timestamp", MigrationUnit.SyncBackCursorUtcTimestamp.ToString() ?? "N/A");

                Properties.Add("SyncBack Inserted", $"{MigrationUnit.SyncBackDocsInserted.ToString()} (from {MigrationUnit.SyncBackInsertEvents.ToString()} events)");
                Properties.Add("SyncBack Deleted", $"{MigrationUnit.SyncBackDocsDeleted.ToString()} (from {MigrationUnit.SyncBackDeleteEvents.ToString()} events)");
                Properties.Add("SyncBack Updated", $"{MigrationUnit.SyncBackDocsUpdated.ToString()} (from {MigrationUnit.SyncBackUpdateEvents.ToString()} events)");
                Properties.Add("SyncBack Duplicate Processed", $"{MigrationUnit.SyncBackDuplicateDocsSkipped.ToString()} skipped");
                Properties.Add("SyncBack Failed (with retries)", $"{MigrationUnit.SyncBackErrors.ToString()}");
            } 

            if (MigrationUnit.ComparedOn.HasValue && MigrationUnit.ComparedOn != DateTime.MinValue)
            {
                Properties.Add("Hash Compared Time", MigrationUnit.ComparedOn.Value.ToString() ?? "N/A");
                Properties.Add("***********Differences", MigrationUnit.VarianceCount.ToString() ?? "N/A");
            }

        }
    }


    private void Cancel()
    {
        if (OnClose.HasDelegate)
        {
            OnClose.InvokeAsync();
        }
    }
}
