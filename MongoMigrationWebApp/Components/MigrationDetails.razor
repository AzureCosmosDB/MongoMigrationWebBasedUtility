@inject Service.JobManager JobManager
@inject IConfiguration Configuration

@using OnlineMongoMigrationProcessor
@using OnlineMongoMigrationProcessor.Models

<div class="modal fade show d-block bg-dark bg-opacity-75" id="myModal" aria-modal="true" role="dialog">
    <div class="modal-dialog bg-dark">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">@(NewMode ? "New Job Details" : "Update Connections Strings")</h4>
                <button type="button" class="btn-close" aria-label="Close" @onclick="@Cancel"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="name" class="form-label">Name</label>
                    <input type="text" id="name" class="form-control" disabled="@(!NewMode)" @bind="name" />
                </div>
                @if (NewMode)
                {
                    <div class="mb-3">
                        <label for="mongo-options" class="form-label">Migration Tool</label>
                        <select id="mongo-options" class="form-select" @onchange="OnSelectionChanged">
                            @if (AllowMongoDump)
                            {
                                <option value="MongoDump and MongoRestore">MongoDump and MongoRestore</option>
                            }
                            <option value="MongoDB Driver">MongoDB Driver</option>
                            <option value="MongoDB Driver (Cosmos DB RU read optimized)">MongoDB Driver (Cosmos DB RU read optimized)</option>
                        </select>
                    </div>
                }                
                <div class="mb-3 checkbox-container">
                    <div class="checkbox-group">
                        <label title="Keep the target collection and append new data without deleting existing records.">
                            <input type="checkbox" id="appendMode" disabled="@(!NewMode)" @bind="appendMode" />
                            Append Mode
                        </label>
                    </div>
                    <div class="checkbox-group">                    
                        <label title="Skip copying indexes from the source; only data will be migrated.">
                            <input type="checkbox" id="copyIndex" disabled="@(!NewMode || appendMode || jobType==JobType.RUOptimizedCopy)" @bind="skipIndexes" />
                            Skip Indexes
                        </label>
                    </div>
                </div>
                <div class="mb-3">
                    <label for="migration-mode" class="form-label" title="Online migration allows live data replication during the process.">
                        Migration Mode
                    </label>                
                    <select id="migration-mode" value="@SelectedMode"  class="form-select" @onchange="OnModeSelectionChanged" disabled="@(!NewMode)">
                        <option value="Offline">Offline</option>
                        <option value="Online">Online</option>
                    </select>
                </div>
                <div class="mb-3">
                    <label for="change-stream-mode" class="form-label" title="Configure when change stream processing begins during migration.">
                        Change Stream Mode
                    </label>                
                    <select id="change-stream-mode" value="@SelectedChangeStreamMode" class="form-select" @onchange="OnChangeStreamModeChanged" disabled="@(!NewMode || !isOnline || jobType == JobType.RUOptimizedCopy)">
                        <option value="Delayed" title="Start change stream processing after all collections are completed. This mode is ideal when migrating a large number of collections.">Delayed</option>
                        <option value="Immediate" title="Start change stream processing immediately as each collection is processed.">Immediate</option>
                        <option value="Aggressive" title="Use aggressive change stream processing when the oplog is small or the write rate is very high. Avoid this mode if a large number of collections need to be migrated.">Aggressive</option>
                    </select>
                </div>
                
               
                <div class="mb-3">
                    <label for="sourceConnectionString" class="form-label">Source Connection String</label>
                    <input type="password" id="sourceConnectionString" placeholder="@(NewMode ? "" : "For " + sourceEndpoint)" class="form-control" @bind="sourceConnectionString" />
                </div>

                <div class="mb-3">
                    <label for="targetConnectionString" class="form-label">Target Connection String</label>
                    <input type="password" id="targetConnectionString" placeholder="@(NewMode ? "For [account name].mongocluster.cosmos.azure.com" : "For " + targetEndpoint)" class="form-control" @bind="targetConnectionString" />
                </div>

                <div class="mb-3">
                    <label for="nameSpaces" class="form-label">Collections To Migrate</label>
                    <textarea id="nameSpaces" disabled="@(!NewMode)" rows="4" placeholder="e.g. db1.col1,db1.col2,db2.col1,db2.col5 or CollectionInfo JSON format as described in readme" class="form-control" @bind="namespaces"></textarea>
                </div>
                <div class="mb-3 checkbox-container">
                    <div class="checkbox-group">
                        <label title="Enable syncing back to the source after migration. Helps reduce risk by allowing a rollback to the original server if needed.">
                            <input type="checkbox" id="enableSyncBack" disabled="@(!NewMode || !isOnline)" @bind="enableSyncBack" />
                            Post Migration Sync Back
                        </label>
                    </div>
                </div>
                <div class="mb-3">
                    <label for="isSimulatedRun" class="form-label" title="Enable simulated run where no actual writes will occur on the target database.">
                        <input type="checkbox" id="isSimulatedRun" disabled="@(!NewMode)" @bind="isSimulatedRun" />
                        Simulation Mode (No Writes to Target)
                    </label>
                </div>                             

                @if(ShowWarning())
                {
                    <div class="alert alert-warning mt-2">
                        <label for="overwrite" class="form-label" title="Enable simulated run where no actual writes will occur on the target database.">
                        <input type="checkbox" id="overwrite" @bind="overwrite" />
                            I agree to overwrite the target collections. This will remove all existing data in the target collections before migration begins.
                        </label>
                        Choose the <b>Append Mode</b> option if you want to keep existing data without overwriting it.
                    </div>
                }

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger mt-2">
                        @errorMessage
                        <button type="button" class="btn-close btn-close-sm" aria-label="Close" @onclick="() => errorMessage = string.Empty"></button>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="@HandleSubmit">Ok</button>
                <button type="button" class="btn btn-secondary" @onclick="@Cancel">Cancel</button>
            </div>

            
        </div>
    </div>
</div>

@code {


    [Parameter]
    public bool NewMode { get; set; }

    [Parameter]
    public MigrationJob? Job { get; set; }

    [Parameter]
    public EventCallback<MigrationJob> OnSubmit { get; set; }

    [Parameter]
    public Func<string, Task<bool>>? CheckNameExists { get; set; }

    private string errorMessage = string.Empty;
    private JobType jobType = JobType.MongoDriver; // Use JobType enum instead of boolean
    private string selectedOption = "MongoDB Driver"; // Default dropdown value
    private bool isSimulatedRun = false; // Variable to track the dummy run option
    private bool isOnline = true; // Default to online migration
    private bool startCSAfterUploads = true; // Start change streams after all uploads are done
    private bool aggressiveCS = false; // if the migration is online, aggressive change stream can be enabled
    private bool enableSyncBack = false;// if the migration is online, reverse sync can be enabled
    private bool skipIndexes = false;// create indexes on Target
    private bool appendMode = true;// if the target collection exists, it will be deleted
    private string namespaces = string.Empty;   // Comma-separated list of namespaces to migrate
    private string name = string.Empty; // Name of the migration job
    private string sourceEndpoint = string.Empty;   // Source endpoint extracted from the connection string
    private string targetEndpoint = string.Empty;   // Target endpoint extracted from the connection string
    private string SelectedMode = "Offline"; // default or loaded value
    private string SelectedChangeStreamMode = "Delayed"; // Default change stream mode
    private string sourceConnectionString { get; set; } = string.Empty;
    private string targetConnectionString { get; set; } = string.Empty;
    private bool AllowMongoDump => Configuration.GetValue<bool>("AllowMongoDump");
    private bool overwrite = false; // Flag to indicate if the target collections should be overwritten
    private void OnModeSelectionChanged(ChangeEventArgs e)
    {
        var val = e?.Value?.ToString() ?? string.Empty;
        isOnline = val == "Online";
    }

    private void OnChangeStreamModeChanged(ChangeEventArgs e)
    {
        var val = e?.Value?.ToString() ?? "Delayed";
        SelectedChangeStreamMode = val;
        
        // Map dropdown selection to boolean flags
        switch (val)
        {
            case "Delayed":
                startCSAfterUploads = true;
                aggressiveCS = false;
                break;
            case "Immediate":
                startCSAfterUploads = false;
                aggressiveCS = false;
                break;
            case "Aggressive":
                startCSAfterUploads = false;
                aggressiveCS = true;
                break;
        }
    }

    private bool ShowWarning()
    {
        // Show warning if the job is new, and append mode is not selected
        return NewMode && !appendMode && !isSimulatedRun;
    }

    private void OnSelectionChanged(ChangeEventArgs e)
    {
        selectedOption = e?.Value?.ToString() ?? selectedOption;
        jobType = selectedOption switch
        {
            "MongoDump and MongoRestore" => JobType.DumpAndRestore,
            "MongoDB Driver (Cosmos DB RU read optimized)" => JobType.RUOptimizedCopy,
            _ => JobType.MongoDriver
        };

        if (jobType == JobType.RUOptimizedCopy)
        {
            skipIndexes = true; // Skip indexes for RU optimized copy
            SelectedChangeStreamMode = "Immediate"; // Set to Immediate for RU optimized copy
            startCSAfterUploads = false;
            aggressiveCS = false;
        }       
    }

    protected override void OnInitialized()
    {
        if (NewMode)
        {
            name = string.Empty;
            sourceConnectionString = string.Empty;
            targetConnectionString = string.Empty;
            namespaces = string.Empty;
            isOnline = false;
            enableSyncBack = false;
            jobType = JobType.DumpAndRestore;
            selectedOption = "MongoDump and MongoRestore";
            isSimulatedRun = false;
            skipIndexes = false;
            appendMode = true;
            aggressiveCS = false;
            startCSAfterUploads = true;
            SelectedChangeStreamMode = "Delayed"; // Default to Delayed
        }
        else
        {
            name = Job?.Name ?? string.Empty;
            sourceConnectionString = Job?.SourceConnectionString ?? string.Empty;
            targetConnectionString = Job?.TargetConnectionString ?? string.Empty;
            namespaces = Job?.NameSpaces ?? string.Empty;
            sourceEndpoint = Job?.SourceEndpoint ?? string.Empty;
            targetEndpoint = Job?.TargetEndpoint ?? string.Empty;
            isOnline = Job?.IsOnline ?? false;
            startCSAfterUploads = Job?.CSStartsAfterAllUploads ?? true;
            aggressiveCS = Job?.AggresiveChangeStream ?? false; 
            enableSyncBack = (Job?.SyncBackEnabled ?? false) && isOnline && !(Job?.IsSimulatedRun ?? false); // Reverse sync only if online and not a simulated run
            jobType = Job?.JobType ?? JobType.MongoDriver;
            selectedOption = jobType switch
            {
                JobType.DumpAndRestore => "MongoDump and MongoRestore",
                JobType.RUOptimizedCopy => "MongoDB Driver (Cosmos DB RU read optimized)",
                _ => "MongoDB Driver"
            };
            isSimulatedRun = Job?.IsSimulatedRun ?? false;
            skipIndexes = Job?.SkipIndexes ?? false;
            appendMode = Job?.AppendMode ?? false;

            // Set dropdown value based on existing boolean flags
            if (aggressiveCS)
            {
                SelectedChangeStreamMode = "Aggressive";
            }
            else if (startCSAfterUploads)
            {
                SelectedChangeStreamMode = "Delayed";
            }
            else
            {
                SelectedChangeStreamMode = "Immediate";
            }

            if(isOnline)
            {
                SelectedMode = "Online";
            }
            else
            {
                SelectedMode = "Offline";
            }
        }
    }
    private async void HandleSubmit()
    {
        if (ShowWarning() && !overwrite)
        {
            errorMessage = "Please check the overwrite option to proceed with migration.";
            return;
        }

        if (string.IsNullOrEmpty(name))
        {
            errorMessage = "Name can't be empty.";
            return;
        }

        if (NewMode && CheckNameExists != null) // Ensure callback is provided
        {
            var nameExists = await CheckNameExists(name);
            if (nameExists)
            {
                errorMessage = "Name already exists.";
                return;
            }
        }

        if (string.IsNullOrEmpty(sourceConnectionString) || string.IsNullOrEmpty(targetConnectionString))
        {
            errorMessage = "Source and Target Connection Strings can't be empty.";
            return;
        }

        var tmpSrcEndpoint = Helper.ExtractHost(sourceConnectionString);
        if (tmpSrcEndpoint != sourceEndpoint && !NewMode)
        {
            errorMessage = "Source endpoint doesn't match provided Source Connection String.";
            return;
        }

        var tmpTgtEndpoint = Helper.ExtractHost(targetConnectionString);
        if (tmpTgtEndpoint != targetEndpoint && !NewMode)
        {
            errorMessage = "Target endpoint doesn't match provided Target Connection String.";
            return;
        }

        if (tmpTgtEndpoint == tmpSrcEndpoint)
        {
            errorMessage = "Target and Source endpoints can't be the same.";
            return;
        }

        if (NewMode)
        {
            var retValue = Helper.ValidateNamespaceFormat(namespaces, jobType);

            if (retValue == null)
            {
                errorMessage = "Invalid namespace format.";
                return;
            }
            if (!retValue.Item1)
            {
                errorMessage = retValue.Item3;
                return;
            }
            else
            {
                namespaces = retValue.Item2;
            }
        }

        var job = new MigrationJob
        {
            Name = name,
            Id = Guid.NewGuid().ToString(),
            IsOnline = isOnline,
            SourceConnectionString = sourceConnectionString,
            TargetConnectionString = targetConnectionString,
            SourceEndpoint = tmpSrcEndpoint,
            TargetEndpoint = tmpTgtEndpoint,
            NameSpaces = namespaces,
            JobType = jobType,
            IsSimulatedRun = isSimulatedRun,
            SkipIndexes = skipIndexes,
            AppendMode = appendMode,
            SyncBackEnabled = (enableSyncBack && isOnline && !isSimulatedRun) ? true : false,
            CSStartsAfterAllUploads = startCSAfterUploads,
            AggresiveChangeStream = aggressiveCS
        };
        await OnSubmit.InvokeAsync(job);
    }

    private Task Cancel()
    {
        return OnSubmit.InvokeAsync(null);
    }
}