@page "/migrationjobviewer/{jobId}"

@using OnlineMongoMigrationProcessor;
@using MongoMigrationWebApp.Components
@inject Service.JobManager JobManager
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject Service.FileService FileService
@inject HttpClient HttpClient

<div class="d-flex justify-content-between align-items-center mb-3">
    <h3>
        <button class="btn btn-light" @onclick="GoBack" title="Back to Job List" style="border: none; background: transparent;">
            <i class="bi bi-arrow-left"></i>
        </button> @MigrationJob?.Name - Job Status
    </h3>
    <div class="d-flex align-items-center mb-3">
        @if(IsResumeEnabled())
        {
            <div class="btn-group mx-2">
                <button class="btn btn-primary dropdown-toggle" type="button" id="resumeJobDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                    Resume Job
                </button>
                <ul class="dropdown-menu" aria-labelledby="resumeJobDropdown">
                    <li><a class="dropdown-item" @onclick="ResumeJobWithNewConnectionString">With Updated Connection Strings</a></li>
                    @if (MigrationJob != null && !string.IsNullOrEmpty(MigrationJob.SourceConnectionString) && !string.IsNullOrEmpty(MigrationJob.TargetConnectionString))
                    {
                        <li><a class="dropdown-item" @onclick="ResumeJobWithExistingConnectionString">With Existing Connection Strings</a></li>
                    }
                </ul>
            </div>
        }

        @if (IsPauseEnabled())
        {
            <button class="btn btn-primary mx-2" title="Pause Job" @onclick="PauseJob">Pause Job</button>

            @if (MigrationJob != null && MigrationJob.IsOnline && MigrationJob.SyncBackEnabled && !MigrationJob.ProcessingSyncBack)
            {
                <button class="btn btn-warning dropdown-toggle" title="Perform Cut Over" disabled="@(!CheckCutoverReadiness())" data-bs-toggle="dropdown" aria-expanded="false">Cut Over</button>

                <ul class="dropdown-menu" aria-labelledby="performCutOverDropdown">
                    <li><a class="dropdown-item" @onclick="InitSyncBackJob">With Sync Back</a></li>
                    <li><a class="dropdown-item" @onclick="CompleteJob">Without Sync Back</a></li>

                </ul>
            }
            else if (MigrationJob != null && MigrationJob.IsOnline && MigrationJob.SyncBackEnabled && MigrationJob.ProcessingSyncBack)
            {
                <button class="btn btn-warning" title="Complete Job" @onclick="CompleteJob">Complete Job</button>
            }
            else if (MigrationJob != null && MigrationJob.IsOnline && !MigrationJob.SyncBackEnabled)
            {
                <button class="btn btn-warning" title="Perform Cut Over" disabled="@(!CheckCutoverReadiness())" @onclick="CompleteJob">Cut Over</button>
            }

            <button class="btn btn-toolbar" title="Refresh" @onclick="Refresh">
                <i class="bi bi-arrow-repeat"></i>
            </button>
        }

    </div>
</div>


@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="alert alert-danger mt-2">@_errorMessage</div>
}


@if (_migrationDetailsPopUpOpen && MigrationJob != null)
{
    <MongoMigrationWebApp.Components.MigrationDetails NewMode=false
                                                      Job="@MigrationJob"
                                                      OnSubmit="@OnMigrationDetailsPopUpSubmit"
                                                      CheckNameExists="CheckIfNameExistsAsync" />
}

@if (_yesNoDialogOpen)
{
   <YesNoDialog Type=_yesNoDiaLogType Caption="Confirmation Required" Message="@_message" OnClose="@YesNoDialogSubmit" />
}
@if (_manageCollectionDialogOpen && MigrationJob != null)
{
    <ManageCollections MigrationUnits="@MigrationJob.MigrationUnits" OnCollectionsUpdated="@OnCollectionsUpdated" />
}

@if (_resetChangeStreamDialogOpen && MigrationJob != null)
{
    <ResetChangeStream MigrationUnits="@((MigrationJob?.MigrationUnits ?? new List<MigrationUnit>()).Where(mu => mu.SourceStatus == CollectionStatus.OK).ToList())" OnCollectionsUpdated="@OnCSReset" />
}
@if (_collectionDetailsDialogOpen && _selectedMigrationUnit != null)
{
    <CollectionDetails MigrationJob="@MigrationJob"  MigrationUnit="@_selectedMigrationUnit" OnClose="HandleCollectionDetailsClose" />
}


<table class="table">
    <thead>
        <tr>
            <th>Database Name</th>
            <th>Collection Name</th>
            @if (MigrationJob != null && MigrationJob.JobType==OnlineMongoMigrationProcessor.Models.JobType.DumpAndRestore)
            {
                <th>Download Status</th>
                <th>Upload Status</th>
            }
            else
            {
                <th>Copy Status</th>
            }
            @if (MigrationJob != null && MigrationJob.IsOnline && !MigrationJob.ProcessingSyncBack)
            {
                @if (MigrationJob.JobType != OnlineMongoMigrationProcessor.Models.JobType.RUOptimizedCopy)
                {
                    <th>Time Since Last Change</th>
                    <th>Last Batch – Total Changes</th>
                }
                else
                {
                    <th>Change Stream Last Batch – Total Changes</th>
                }

            }
            @if (MigrationJob != null && MigrationJob.IsOnline && MigrationJob.ProcessingSyncBack)
            {

                 <th>Time Since Last Sync Back</th>
                <th>Last Batch – Total Changes</th>
            }
        </tr>
    </thead>
    <tbody>
        @if (MigrationJob!=null && MigrationJob.MigrationUnits != null)
        {
            @foreach (var unit in MigrationJob.MigrationUnits)
            {
                <tr>

                    <td>
                        <i class="bi bi-info-circle-fill me-2" title="More info" style="cursor: pointer;"
                           @onclick="() => ShowCollectionDetails(unit)"></i>
                        @unit.DatabaseName
                    </td>
                    <td>@unit.CollectionName</td>
                    <td>
                        @(unit.SourceStatus == CollectionStatus.NotFound ? "MISSING or EMPTY" : (unit.DumpComplete ? "Success" : $"{unit.DumpPercent:F1}%"))
                    </td>

                    @if (MigrationJob != null && MigrationJob.JobType == OnlineMongoMigrationProcessor.Models.JobType.DumpAndRestore)
                    {
                        <td>
                            @(unit.SourceStatus == CollectionStatus.NotFound ? "MISSING or EMPTY" : (unit.RestoreComplete || unit.RestorePercent == 100 ? "Success" : $"{unit.RestorePercent:F1}%"))
                        </td>
                    }
                    @if (MigrationJob != null && MigrationJob.IsOnline)
                    {
                        @if (MigrationJob.JobType != OnlineMongoMigrationProcessor.Models.JobType.RUOptimizedCopy || MigrationJob.ProcessingSyncBack)
                        {
                            <td>                           
                               @GetChangeStreamLag(unit, MigrationJob.ProcessingSyncBack)                            
                            </td>
                        }
                        <td>
                            @unit.CSUpdatesInLastBatch
                        </td>
                    }
                   
                </tr>
            }
        }
    </tbody>
</table>
<div class="d-flex align-items-center mb-3">
    <button class="btn btn-primary mx-2" title="You can add or remove collections from this job. Be sure to pause the job before doing so." @onclick="ManageCollections">Update Collections</button>
    @if (MigrationJob != null && MigrationJob.IsOnline)
    {
        <button class="btn btn-warning mx-2" title="Reset the change stream checkpoint to start from the beginning. This may add extra load to the migration process and could delay other collections. Ensure the job is paused before continuing." @onclick="ResetChangeStream">
            @(((MigrationJob?.MigrationUnits ?? new List<MigrationUnit>()).Any(MigrationUnit => MigrationUnit.ResetChangeStream)) ? "✓ Reset Change Stream" : "☐ Reset Change Stream")
        </button>

        @if (MigrationJob?.JobType != OnlineMongoMigrationProcessor.Models.JobType.RUOptimizedCopy)
        {
            <button class="btn btn-warning mx-2" title="Compare randomly selected documents from collections in the source and target accounts to identify any discrepancies or missing entries. Be sure to pause the job before doing so." @onclick="RunComparison">
                @((MigrationJob?.RunComparison ?? false) ? "✓ Run Hash Check" : "☐ Run Hash Check")
            </button>
        }
    }
    
</div>

@if (LogBucket != null && VerboseMessages != null && VerboseMessages.Count > 0 && !_showLogBackupFile)
{
    <h5 class="pt-4">
        Monitor
    </h5>
    <div>
        <table class="table message-output">
            <tbody>
                @foreach (var logObject in VerboseMessages)
                {
                    <tr class="@GetRowClass(logObject.Type.ToString(), logObject.Message)">
                        <td>
                            @if(string.IsNullOrEmpty(logObject.Message))
                            {
                                <span>&nbsp;</span>
                            }
                            else
                            {
                                <span>@logObject.Datetime - @logObject.Message</span>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@if (LogBucket != null && LogBucket.Logs != null && !_showLogBackupFile)
{
    <h5 class=" pt-4">
        <button class="btn btn-light" @onclick="DownloadFile" title="Download Log File"  style="border: none; background: transparent;">
            <i class="bi bi-download"></i>
        </button> Logs
    </h5>


    <table class="table console-output">
        <thead>
            <tr>
                <th style="width: 150px;">Date Time (UTC)</th>
                <th>Message</th>
            </tr>
        </thead>
        <tbody>

            @foreach (var logObject in LogBucket.Logs.TakeLast(200).Reverse())  // Reverse the last 200 items
            {
                <tr class="@GetRowClass(logObject.Type.ToString(),logObject.Message)">
                    <td>@logObject.Datetime</td>
                    <td>@logObject.Message</td>
                </tr>
            }                

            @if (LogBucket.Logs.Count > 250)
            {
                <tr>
                    <td> ....</td>
                    <td> ..... </td>
                </tr>

                @foreach (var logObject in LogBucket.Logs.Take(30).Reverse()) // Reverse the top 30 items
                {
                    <tr class="@GetRowClass(logObject.Type.ToString(),logObject.Message)">
                        <td style="width: 120px;">@logObject.Datetime</td>
                        <td>@logObject.Message</td>
                    </tr>
                }
            }
        </tbody>
    </table>


}
else if (@_showLogBackupFile)
{
    <div class="alert alert-danger">
        <p>
            Failed to load the log file. It appears to be corrupt and has been backed up.
            Use the button below to download the previous log. A new log file will be created
            when the job is resumed.
        </p>
        <button class="btn btn-primary mx-2"
                @onclick="DownloadLogBackupFile"
                title="Download Log File">
            Download Backup File
        </button>
    </div>
}
@code {


    [Parameter]
    public string JobId { get; set; } = string.Empty;

    [Parameter]
    public MigrationJob? MigrationJob { get; set; }

    private LogBucket? LogBucket { get; set; }
    private List<LogObject> VerboseMessages { get; set; } = new();

    private string _errorMessage = string.Empty;
    private bool _migrationDetailsPopUpOpen;
    private Timer? _refreshTimer;
    private string _message = string.Empty;
    private bool _yesNoDialogOpen;
    private YesNoDialog.Category _yesNoDiaLogType= YesNoDialog.Category.CutoverNot;
    private bool _manageCollectionDialogOpen;
    private bool _resetChangeStreamDialogOpen;
    private bool _collectionDetailsDialogOpen;

    private bool _showLogBackupFile = false;
    private string _logBackupFile = string.Empty;
    private MigrationUnit? _selectedMigrationUnit;

    private string GetRowClass(string type, string message)
    {
        string rowClass = string.Empty;
        string lowerMessage = message.ToLower();

        if (lowerMessage.Contains("warning") || lowerMessage.Contains("failure") || lowerMessage.Contains("error") || lowerMessage.Contains("failed") || lowerMessage.Contains("cancel"))
        {
            rowClass = "warning-row"; // Change to warning-row if any condition matches
        }

        if (type == "Error")
        {
            rowClass = "error-row"; // Assign the default row class
        }

        return rowClass;
    }

    private void GoBack()
    {
        _refreshTimer?.Dispose();
        NavigationManager.NavigateTo("/"); // Navigate back to the previous page
    }

    private void StartAutoRefresh()
    {
        _showLogBackupFile = false;
        _logBackupFile = string.Empty;  
        MigrationJob = GetMigrations().Find(m => m.Id == JobId);
        if (MigrationJob != null && MigrationJob.IsStarted)
        {
            _refreshTimer = new Timer(Refresh, null, 0, 5000); // Update every 5 seconds
            ScheduleUpdateTimerStatus(JobId, 30); // check to set the timer status based on whether the job is live or not
        }

    }

    private void ShowCollectionDetails(MigrationUnit unit)
    {
        _selectedMigrationUnit = unit;
        _collectionDetailsDialogOpen = true;
    }

    private List<MigrationJob> GetMigrations()
    {
        var list = JobManager.GetMigrations(out string errorMessage);
        if (!string.IsNullOrEmpty(errorMessage))
        {
            _errorMessage = errorMessage;
        }
        return list ?? new List<MigrationJob>();
    }

    private async Task DownloadLogBackupFile()
    {
        if (string.IsNullOrEmpty(_logBackupFile))
        {
            return;
        }
        await Downloader(_logBackupFile, $"Backup_{_logBackupFile}");
    }


    private async Task DownloadFile()
    {
        if (string.IsNullOrEmpty(JobId))
        {
            return;
        }
        await Downloader(JobId, JobId);
    }

    private async Task Downloader(string fileName, string displayName)
    {
        var url = $"/api/File/download/log/{fileName}"; 
        var response = await HttpClient.GetAsync(url);

        if (response.IsSuccessStatusCode)
        {
            var fileBytes = await response.Content.ReadAsByteArrayAsync();
            var contentType = response.Content.Headers.ContentType?.ToString() ?? "application/octet-stream";

            // Use JavaScript to trigger the file download
            await JS.InvokeVoidAsync("downloadFile", fileBytes, $"{displayName}.json", contentType);
        }
        else
        {
            Console.Error.WriteLine($"Failed to download log file: {displayName}.json");
        }
    }


    private void Refresh(object? state)
    {

        MigrationJob = GetMigrations().Find(m => m.Id == JobId);
        if (MigrationJob != null && (MigrationJob.IsStarted || JobManager.DidMigrationJobExitRecently(JobId)) && !_showLogBackupFile)
        {
            LogBucket = JobManager.GetLogBucket(JobId, out string logBackup, out bool isLive);
            if (!string.IsNullOrEmpty(logBackup) && logBackup != JobId)
                _logBackupFile = logBackup;

            VerboseMessages = JobManager.GetVerboseMessages(JobId ?? string.Empty);
            //Console.WriteLine($"Refresh called for {JobId}");

            if (!string.IsNullOrEmpty(_logBackupFile))
            {
                _refreshTimer?.Dispose();
                _refreshTimer = null;
                _showLogBackupFile = true;
            }
            else
                _showLogBackupFile = false;

            InvokeAsync(StateHasChanged); // Ensure UI updates on the main thread
        }
        else
        {    
            _refreshTimer?.Dispose();

        }

    }

    private async Task UpdateTimerStatus(string id, int seconds)
    {
        await Task.Delay(TimeSpan.FromSeconds(seconds)); // Wait for the specified seconds before processing

        Console.WriteLine($"UpdateTimerStatus Invoked");

        if (id!= JobId)
        {
            return; // Exit if the JobId does not match
        }

        MigrationJob = GetMigrations().Find(m => m.Id == id);
        if (MigrationJob != null && MigrationJob.IsStarted)
        {
            LogBucket = JobManager.GetLogBucket(id, out string logBackup, out bool isLive);
            if (!string.IsNullOrEmpty(logBackup) && logBackup != JobId)
                _logBackupFile = logBackup;

            if (!isLive)               
            {
                _refreshTimer?.Dispose(); // Stop the timer if not live
                _refreshTimer = null;
                //_showLogBackupFile = false;
            }
        }

    }

    private void ScheduleUpdateTimerStatus(string id, int seconds)
    {
        _ = Task.Run(async () => await UpdateTimerStatus(id, seconds));
    }

    private Task<bool> CheckIfNameExistsAsync(string name)
    {
        //always false as we are not checking for duplicate names in this case
        return Task.FromResult(false);
    }

    private string GetChangeStreamLag(MigrationUnit unit, bool isSyncBack=false)
    {
        DateTime timestamp;
        if (isSyncBack)
        {
            timestamp = unit.SyncBackCursorUtcTimestamp;
        }
        else
        {
            timestamp = unit.CursorUtcTimestamp;
        }

        if (timestamp == DateTime.MinValue || unit.ResetChangeStream)
        {
            return "NA";
        }

        var currentUtc = DateTime.UtcNow;
        var lag = currentUtc - timestamp;

        if (lag.TotalSeconds < 0)
        {
            return "Invalid";
        }

        return $"{(int)lag.TotalMinutes} min {(int)lag.Seconds} sec";
    }

    private bool CheckCutoverReadiness()
    {
    var mjCheck = MigrationJob;
    if (mjCheck?.MigrationUnits == null) return false;
    foreach (var mu in mjCheck.MigrationUnits)
        {
            if (mu.SourceStatus != CollectionStatus.NotFound)
            {
                if (mu.DumpPercent != 100 || mu.RestorePercent != 100)
                    return false;
            }
        }
        return true;
    }

    protected override async Task OnParametersSetAsync()
    {
        MigrationJob = GetMigrations().Find(m => m.Id == JobId);

        if (MigrationJob == null) // Fixed the condition to check for null
        {
            return;
        }


    LogBucket = JobManager.GetLogBucket(JobId, out string logBackup, out bool isLive);
        if (!string.IsNullOrEmpty(logBackup) && logBackup != JobId)
            _logBackupFile = logBackup;

        if (!string.IsNullOrEmpty(_logBackupFile))
        {
            _showLogBackupFile = true;
        }
        else
        {
            _showLogBackupFile = false;
            if (IsResumeEnabled())
            {
                await ResumeJob();
            }
            var mjLocal = MigrationJob;
            if (mjLocal != null && !mjLocal.IsCancelled && !mjLocal.IsCompleted && IsJobRunning())// && MigrationJob.CurrentlyActive
            {
                StartAutoRefresh();
            }
        }        
    }

    private async Task OnMigrationDetailsPopUpSubmit(MigrationJob? job)
    {
        _migrationDetailsPopUpOpen = false;
        await Task.Delay(100);
        var mj = MigrationJob;
        if (job == null || mj == null)
        {
            return;
        }

        // Copy connection strings from the provided job into the current migration
        mj.SourceConnectionString = job.SourceConnectionString;
        mj.TargetConnectionString = job.TargetConnectionString;

            // MigrationJob.CurrentlyActive = true;
            mj.IsCancelled = false;

            if (!mj.StartedOn.HasValue)
                mj.StartedOn = DateTime.UtcNow;

            mj.IsStarted = true;            

            JobManager.SaveJobs(out string errorMessage);
            if(!string.IsNullOrEmpty(errorMessage))
            {
                _errorMessage = errorMessage;                
                return;
            }

            // Run the long task on a separate thread
            await Task.Run(() =>
            {
                // JobManager.DisposeLogs();

                if (mj!.ProcessingSyncBack && !mj.IsSimulatedRun)
                {
                    JobManager.SyncBackToSource(mj.SourceConnectionString ?? string.Empty,
                                                mj.TargetConnectionString ?? string.Empty,
                                                mj);
                }
                else
                {
                    JobManager.StartMigrationAsync(mj,
                                                   mj.SourceConnectionString ?? string.Empty,
                                                   mj.TargetConnectionString ?? string.Empty,
                                                   mj.NameSpaces ?? string.Empty,
                                                   mj.JobType,
                                                   mj.IsOnline);
                }
            });

            StartAutoRefresh();
    }

    private void RunComparison()
    {
        _errorMessage = string.Empty;
        if (IsResumeEnabled())
        {
            _yesNoDiaLogType=YesNoDialog.Category.RunComparisonNot;
            _message = "Comparing collections using random sampling may take some time. This process will block the migration and could cause delays. Please confirm if you want to continue with the comparison. You will need to resume the job to continue.";
            _yesNoDialogOpen = true;

        }
        else
        {
            _errorMessage = "Please pause the job before you run the comparison.";
        }
    }

    private void ResetChangeStream()
    {
        _errorMessage = string.Empty;
        if (IsResumeEnabled() && !(MigrationJob?.ProcessingSyncBack ?? false))
        {
            _resetChangeStreamDialogOpen = true;
        }
        else
        {
            if (MigrationJob?.ProcessingSyncBack ?? false)
                _errorMessage = "You cannot reset change stream after sync back has started.";
            else
                _errorMessage = "Please pause the job before resetting change stream.";
        }
    }
    private void ManageCollections()
    {
        _errorMessage = string.Empty;
        if (IsResumeEnabled() && !(MigrationJob?.ProcessingSyncBack ?? false))
        {
            _manageCollectionDialogOpen = true;
        }
        else
        {
            if (MigrationJob?.ProcessingSyncBack ?? false)
                _errorMessage = "You cannot update collections after sync back has started.";
            else
                _errorMessage = "Please pause the job before updating collections.";
        }
    }
    private async Task ResumeJobWithNewConnectionString()
    {
        await DecideAndResumeJob(true);
    }

    private async Task ResumeJobWithExistingConnectionString()
    {
        if (IsResumeEnabled() && NoOtherActiveJobs())
        {
        var mjResume = MigrationJob;
        if (mjResume != null)
            await OnMigrationDetailsPopUpSubmit(mjResume);
            else
                _migrationDetailsPopUpOpen = true;
        }
        else
            _migrationDetailsPopUpOpen = true;
    }

    private async Task ResumeJob()
    {
        await DecideAndResumeJob(false);
    }

    private async Task DecideAndResumeJob(bool showDialog=false)
    {
        _errorMessage = string.Empty;
        if (IsResumeEnabled() && NoOtherActiveJobs())
        {
            if(showDialog)
                _migrationDetailsPopUpOpen = true;
            else
            {
                if (CanAutoStart())
                {
                    var mjAuto = MigrationJob;
                    if (mjAuto != null)
                        await OnMigrationDetailsPopUpSubmit(mjAuto);
                }

            }
        }
        else
        {
            _errorMessage = "Please stop active job, before starting/resuming a job.";
        }
    }

    private bool IsJobRunning()
    {
    return JobManager.IsProcessRunning(JobId);
    }

    private void InitSyncBackJob()
    {
        _message = "You are about to initiate cutover and begin syncing data back to the source. Proceed only if all changes from the source have already been replicated to the target. This action is irreversible. Are you sure you want to cutover?";
        _yesNoDiaLogType = YesNoDialog.Category.SyncBackNot;
        _yesNoDialogOpen = true;      
    }

    private void CompleteJob()
    {
    if (MigrationJob?.ProcessingSyncBack ?? false)
        {
            _message = "You can't resume a job after its completed. Are you sure you want to complete the job?";
            _yesNoDiaLogType = YesNoDialog.Category.CompleteNot;
        }
        else
        {
            _message = "You can't resume a job after its cutover. Are you sure you want to cutover?";
            _yesNoDiaLogType = YesNoDialog.Category.CutoverNot;
        }
        _yesNoDialogOpen = true;
    }


    private void HandleCollectionDetailsClose()
    {
        _collectionDetailsDialogOpen = false;
        _selectedMigrationUnit = null;     
    }

    private void OnCSReset(List<MigrationUnit> migrationUnits)
    {
        _resetChangeStreamDialogOpen = false;
        var mj = MigrationJob;
        if (migrationUnits != null && mj?.MigrationUnits != null)
        {
            for (int i = 0; i < mj.MigrationUnits.Count; i++)
            {
                if (migrationUnits.Contains(mj.MigrationUnits[i]))
                    mj.MigrationUnits[i].ResetChangeStream = true; // Reset change stream for every second collection
                else
                    mj.MigrationUnits[i].ResetChangeStream = false; // Ensure other collections are not reset
            }
            if (!SaveJobs()) return;
        }
    }


    private void OnCollectionsUpdated(List<MigrationUnit> migrationUnits)
    {
        _manageCollectionDialogOpen = false;


    var mj2 = MigrationJob;
    if (migrationUnits != null && mj2 != null)
        {
            mj2.NameSpaces = string.Join(",", migrationUnits.Select(x => x.DatabaseName + "." + x.CollectionName));
            mj2.MigrationUnits = migrationUnits;
            if (!SaveJobs()) return;
        }
    }

    private bool SaveJobs()
    {
        JobManager.SaveJobs(out string errorMessage);
        if (!string.IsNullOrEmpty(errorMessage))
        {
            _errorMessage = errorMessage;
            return false;
        }
        return true;
    }


    private void YesNoDialogSubmit(YesNoDialog.YesNoDialogResult result)
    {
        _yesNoDialogOpen = false;
        if (result.IsConfirmed)
        {
            if (result.DiaLogType == YesNoDialog.Category.CutoverNot || result.DiaLogType == YesNoDialog.Category.CompleteNot)
            {
                JobManager.StopMigration();
                var mjc = MigrationJob;
                if (mjc != null)
                {
                    mjc.IsCancelled = true;
                    mjc.IsCompleted = true;
                }
                // MigrationJob.CurrentlyActive = false;
                if(!SaveJobs()) return;
                _refreshTimer = null;
            }
            else if (result.DiaLogType == YesNoDialog.Category.SyncBackNot)
            {
                var mjs = MigrationJob;
                if (mjs != null)
                {
                    JobManager.SyncBackToSource(mjs.SourceConnectionString ?? string.Empty,
                                                mjs.TargetConnectionString ?? string.Empty,
                                                mjs);
                }
                if (!SaveJobs()) return;
            }
            else if( result.DiaLogType == YesNoDialog.Category.RunComparisonNot)
            {
                var mjr = MigrationJob;
                if (mjr != null)
                {
                    mjr.RunComparison = true;
                }
                if (!SaveJobs()) return;
            }

        }
        else
        {
            if (result.DiaLogType == YesNoDialog.Category.RunComparisonNot)
            {
                var mjr2 = MigrationJob;
                if (mjr2 != null)
                {
                    mjr2.RunComparison = false;
                }
                if (!SaveJobs()) return;
            }
        }
    }

    private void PauseJob()
    {
        _errorMessage = string.Empty;
        JobManager.StopMigration();
        // MigrationJob.CurrentlyActive = false;
        if (!SaveJobs()) return;
        _refreshTimer = null;
    }

    private bool NoOtherActiveJobs()
    {        

        string activeJob = JobManager?.GetRunningJobId() ?? string.Empty;
        if (activeJob != string.Empty && activeJob != JobId)
            return false;
        else
            return true;
    }

    private  bool  IsPauseEnabled()
    {
    var mj = MigrationJob;
    return mj != null && !mj.IsCancelled && !mj.IsCompleted && IsJobRunning() && NoOtherActiveJobs();
    }


    private bool IsResumeEnabled()
    {
    var mj = MigrationJob;
    return mj != null && !mj.IsCompleted && !IsJobRunning();
    }

    private bool CanAutoStart()
    {
        var mj = MigrationJob;
        if (IsResumeEnabled() && NoOtherActiveJobs() && mj != null && mj.IsStarted &&
            (!string.IsNullOrEmpty(mj.SourceConnectionString) || !string.IsNullOrEmpty(mj.TargetConnectionString)))
        {
            return true;
        }
        return false;
    }
}

